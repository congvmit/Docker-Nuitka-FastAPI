# BASE IMAGE
## Instead of using debian image, we use python rebuilt image as a base
# FROM debian:bullseye-slim as base
FROM python:3.10-slim as base
RUN echo "Building BASE image"

# Generated by your own app
COPY ["Pipfile", "Pipfile.lock", "/var/app/"] 

# RUN apt-get update -y \
#     && apt-get install --no-install-recommends -y \
#         python3.10  \ 
#     && cd /var/app 
    # && python3.10 -m pip install pipenv \
    # && python3.10 -m pipenv lock --keep-outdated --requirements > requirements.txt \
    # && python3.10 -m pip install -r requirements.txt \
    # && rm -rf /var/cache/apt/archives

RUN pip install pipenv
RUN cd /var/app && \
    pipenv requirements > requirements.txt && \
    pip install -r requirements.txt && \
    rm -rf /var/cache/apt/archives

COPY myapp /var/app/myapp

WORKDIR /var/app

# ENTRYPOINT [ "uvicorn", "myapp.main:app" ]

# COMPRESSOR IMAGE
FROM base as compressor
RUN echo "Building COMPRESSOR image"

RUN apt-get update -y \
    && apt-get install --no-install-recommends -y \
        build-essential \
        ccache \
        clang \
        libfuse-dev \
        patchelf \
        upx

RUN python -m nuitka \
        --standalone \
        --nofollow-import-to=pytest \
        --python-flag=nosite,-O \
        --plugin-enable=anti-bloat,implicit-imports,data-files,pylint-warnings,upx \
        --clang \
        --prefer-source-code \
        --warn-implicit-exceptions \
        --warn-unusual-code \
        --include-module=myapp \
        --main=myapp/main.py 
        
    # && rm -rf main.build

    # && cd main.dist/ \
    # && ldd main.bin | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp --no-clobber -v '{}' . \
    # && ldd main.bin | grep "/lib64/ld-linux-x86-64" | awk '{print $1}' | xargs -I '{}' cp --parents -v '{}' . \
    # && cp --no-clobber -v /lib/x86_64-linux-gnu/libgcc_s.so.1 . \
    # && mkdir -p ./lib/x86_64-linux-gnu/ \
    # && cp --no-clobber -v /lib/x86_64-linux-gnu/libresolv* ./lib/x86_64-linux-gnu \
    # && cp --no-clobber -v /lib/x86_64-linux-gnu/libnss_dns* ./lib/x86_64-linux-gnu
    # && upx -9 myapp


# FINAL IMAGE
# FROM scratch as final
# FROM alpine:latest as final
FROM python:3.10 as final
# FROM frolvlad/alpine-miniconda3:python3.7
# FROM continuumio/miniconda3:22.11.1-alpine as final
# FROM python:3.10-alpine as final
RUN echo "Building FINAL image"
RUN mkdir /app
COPY --from=compressor /var/app/main.dist /app/main.dist
WORKDIR /app
EXPOSE 8000
ENTRYPOINT [ "/app/main.dist/main.bin" ]